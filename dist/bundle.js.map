{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./js/demo.js","webpack:///./js/recorder.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAmC;;AAEnC,wBAAwB,iDAAU;;AAElC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C;AAC9C;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA,SAAS;AACT,KAAK;AACL,CAAC,C;;;;;;;;;;;;ACjFD;AAAA;AAAA;AACA;;AAEe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA,0B;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,yDAAyD,iBAAiB;AAC1E;;AAEA,SAAS;AACT;AACA;AACA,SAAS,E;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./js/demo.js\");\n","import RecorderJS from './recorder'\r\n\r\nconst objRecorder = new RecorderJS()\r\n\r\n$(document).ready(() => {\r\n    const btnRecord = $(\"#recordButton\");\r\n    const btnPause = $(\"#pauseButton\")\r\n    const btnStop = $(\"#stopButton\")\r\n\r\n    btnRecord.click(() => {\r\n        objRecorder.start()\r\n        btnPause.prop('disabled', false)\r\n        btnStop.prop('disabled', false)\r\n        btnRecord.prop('disabled', true)\r\n    })\r\n\r\n    btnPause.click(() => {\r\n        if(btnPause.html().trim()==='Pause') {\r\n            btnPause.html('Resume')\r\n        }else{\r\n            btnPause.html('Pause')\r\n        }\r\n        objRecorder.pause()\r\n    })\r\n\r\n    btnStop.click(() => {\r\n        objRecorder.stop()\r\n        objRecorder.exportWAV((blob) => {\r\n            btnRecord.prop('disabled', false)\r\n            btnPause.prop('disabled', true)\r\n            btnStop.prop('disabled', true)\r\n            URL = window.URL || window.webkitURL;\r\n            var url = URL.createObjectURL(blob);\r\n            var au = document.createElement('audio');\r\n            var li = document.createElement('li');\r\n            var link = document.createElement('a');\r\n\r\n            //name of .wav file to use during upload and download (without extendion)\r\n            var filename = new Date().toISOString();\r\n\r\n            //add controls to the <audio> element\r\n            au.controls = true;\r\n            au.src = url;\r\n\r\n            //save to disk link\r\n            link.href = url;\r\n            link.download = filename + \".wav\"; //download forces the browser to donwload the file using the  filename\r\n            link.innerHTML = \"Save to disk\";\r\n\r\n            //add the new audio element to li\r\n            li.appendChild(au);\r\n\r\n            //add the filename to the li\r\n            li.appendChild(document.createTextNode(filename + \".wav \"))\r\n\r\n            //add the save to disk link to li\r\n            li.appendChild(link);\r\n\r\n            //upload link\r\n            var upload = document.createElement('a');\r\n            upload.href = \"#\";\r\n            upload.innerHTML = \"Upload\";\r\n            upload.addEventListener(\"click\", function (event) {\r\n                var xhr = new XMLHttpRequest();\r\n                xhr.onload = function (e) {\r\n                    if (this.readyState === 4) {\r\n                        console.log(\"Server returned: \", e.target.responseText);\r\n                    }\r\n                };\r\n                var fd = new FormData();\r\n                fd.append(\"audio_data\", blob, filename);\r\n                xhr.open(\"POST\", \"upload.php\", true);\r\n                xhr.send(fd);\r\n            })\r\n            li.appendChild(document.createTextNode(\" \"))//add a space in between\r\n            li.appendChild(upload)//add the upload link to li\r\n\r\n            //add the li element to the ol\r\n            recordingsList.appendChild(li);\r\n        })\r\n    })\r\n})","// shim for AudioContext when it's not avb.\r\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\r\n\r\nexport default class RecorderJS {\r\n\r\n    constructor() {\r\n        //stream from getUserMedia()\r\n        this.userMedia = null;\r\n        //Recorder.js object\r\n        this.objRecorder = null;\r\n        //MediaStreamAudioSourceNode we'll be recording\r\n        this.input = null;\t\r\n       \r\n    }\r\n\r\n    start() {\r\n      \r\n        /*\r\n            Simple constraints object, for more advanced audio features see\r\n            https://addpipe.com/blog/audio-constraints-getusermedia/\r\n        */\r\n        const constraints = { audio: true, video: false }\r\n\r\n        /*\r\n            We're using the standard promise based getUserMedia() \r\n            https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\r\n        */\r\n \r\n        navigator.mediaDevices.getUserMedia(constraints).then((stream) => {\r\n            console.log(\"getUserMedia() success, stream created, initializing Recorder.js ...\");\r\n \r\n            /*\r\n                create an audio context after getUserMedia is called\r\n                sampleRate might change after getUserMedia is called, like it does on macOS when recording through AirPods\r\n                the sampleRate defaults to the one set in your OS for your playback device\r\n    \r\n            */\r\n            let audioContext = new AudioContext();\r\n \r\n            // check audioContext.sampleRate\r\n \r\n \r\n            /*  assign to this.userMedia for later use  */\r\n            this.userMedia = stream;\r\n \r\n            /* use the stream */\r\n            this.input = audioContext.createMediaStreamSource(stream);\r\n \r\n            /* \r\n                Create the Recorder object and configure to record mono sound (1 channel)\r\n                Recording 2 channels  will double the file size\r\n            */\r\n            this.objRecorder = new Recorder(this.input, { numChannels: 1 })\r\n            this.objRecorder.record()\r\n \r\n        }).catch(function (err) {\r\n            //enable the record button if getUserMedia() fails\r\n            console.error(err)\r\n        });\t\r\n    }\r\n\r\n    pause() {\r\n        if (this.objRecorder.recording) {\r\n            this.objRecorder.stop();\r\n        } else {\r\n            this.objRecorder.record();\r\n        }\r\n\r\n    }\r\n\r\n    stop() {\r\n        console.log(\"stopButton clicked\");\r\n\r\n        this.objRecorder.stop();\r\n\r\n        //stop microphone access\r\n        this.userMedia.getAudioTracks()[0].stop();\r\n    }\r\n\r\n    exportWAV(cb) {\r\n        this.objRecorder.exportWAV(cb)\r\n    }\r\n\r\n}\r\n"],"sourceRoot":""}